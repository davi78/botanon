import logging
import asyncio
import random
import sqlite3
import string

#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.exceptions
from aiogram.types.message import ContentTypes

#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
from database import dbworker


#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('db dumb1.db')
print('[i] Bot Succes')

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

#–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)

fh = logging.FileHandler("warning_log.log")

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)


warning_log.addHandler(fh)

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message : types.Message, state: FSMContext):

    await state.finish()

    button_search = KeyboardButton('Cari pasanganüîç')

    button_info_project = KeyboardButton('Backpacküëú')

    ranked = KeyboardButton('Chat Teratas‚≠êÔ∏è')

    count_users = KeyboardButton(f'–í –±–æ—Ç–µ —É–∂–µ {int(db.count_user() * 1.5)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πü•≥')

    mark_menu = ReplyKeyboardMarkup()

    mark_menu.add(button_search,button_info_project,ranked,count_users)

    await bot.send_message(message.chat.id,'üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø Chatium, –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n–ò —á–µ–≥–æ —Ç—ã –∂–¥—ë—à—å,–¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º!\n\n–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –∞ —Ç–∞–º —Ä–∞–∑–±–µ—Ä—ë–º—Å—è\n\n–ù–æ–≤–æ—Å—Ç–∏ –∏ –º–µ–º–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ - https://t.me/chatium_community \n\n–õ–∞–º–ø–æ–≤–æ–µ –æ–±—â–µ–Ω–∏—è - https://t.me/chatium_chat',reply_markup=mark_menu)


@dp.message_handler(lambda message : message.text == 'Backpacküëú' or message.text == '–û –ø—Ä–æ–µ–∫—Ç–µüßë‚Äçüíª' or message.text == '–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å' or message.text == '[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]',state='*')
async def about_project(message : types.Message):
    if message.text == 'Backpacküëú':

        for_developers = KeyboardButton('[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]')

        back = KeyboardButton('–ù–∞–∑–∞–¥')

        rules = KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞üìñ')

        mark_menu = ReplyKeyboardMarkup()

        mark_menu.add(for_developers,rules,back)

        await bot.send_message(message.chat.id,'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—É—Çüëá',reply_markup=mark_menu)

    elif message.text == '[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]':
        await message.answer('–ï—Å–ª–∏ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ —Å–º–µ–ª–æ –∫–æ–Ω—Ç—Ä–∏–±—É—Ç—å–µ –Ω–∞ –≥–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É - merlinincorp@gmail.com\n\nGithub - https://github.com/RenatYakublevich/AnonymChat')

@dp.message_handler(commands=['rules'],state='*')
@dp.message_handler(lambda message : message.text == '–ü—Ä–∞–≤–∏–ª–∞üìñ')
async def rules(message : types.Message):
    await message.answer('''üìå–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ @Chatium_Bot\n1. –õ—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤. (–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤)\n2. –î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è. ("–¶–ü")\n3. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ. (Scam)\n4. –õ—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º.\n5. –ü—Ä–æ–¥–∞–∂–∏ —á–µ–≥–æ –ª–∏–±–æ. (–Ω–∞–ø—Ä–∏–º–µ—Ä - –ø—Ä–æ–¥–∞–∂–∞ –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –≤–∏–¥–µ–æ)\n6. –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n7. –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n8. –û–±–º–µ–Ω, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö 18+ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n''')

@dp.message_handler(commands=['search'],state='*')
@dp.message_handler(lambda message: message.text == 'Cari pasanganüîç',state='*')
async def search(message : types.Message):
    try:
        if(not db.user_exists(message.from_user.id)): #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            db.add_user(message.from_user.username,message.from_user.id) #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É –¥–±

        male = KeyboardButton('Laki-Laki')

        wooman = KeyboardButton('Perempuan')

        back = KeyboardButton('Back')

        sex_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

        sex_menu.add(male,wooman,back)

        await message.answer('Pilih jenis kelamin pasangan Anda!\nSiapa yang kamu cari?',reply_markup=sex_menu)
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(lambda message : message.text == 'Chat Teratas‚≠êÔ∏è')
async def ranked(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ '''
    try:
        final_top = ''
        top_count = 0
        for i in db.top_rating():
            for d in i:
                top_count +=1
                if db.get_name_user(d) == None:
                    rofl_list = ['\n–µ–±–∞–∞–∞#—å —Ç—ã –∂—ë—Å—Ç–∫–∏–πüò≥','\n–≤–∞—Å–∞–øüëã','\n–±—Ä–æ –ø–æ–ª–µ–≥—á–µ —Ç–∞–ºüòÆ','\n–≥–µ–Ω–∏–πüß†','\n—Ä–µ—Å–ø–µ–∫—Çü§ü']
                    final_top = final_top + str(top_count) + ' Juara - :(–Ω–µ—Ç—É –Ω–∏–∫–∞' + ' - ' + str(db.get_count_all_msg(d)) + ' Pesan' + rofl_list[top_count-1] + '\n'
                else:
                    rofl_list = ['\n Bagus Bisa Mencapai Rekorüò≥','\n Lumayan Lahüôà','\n Sedikit MenariküòÆ','\n Jenius Kayanyaüß†','\n Jomblo pastiüòÇ']
                    final_top = final_top + 'Rangking' + str(top_count) + ' - @' + str(db.get_name_user(d)) + ' - ' + str(db.get_count_all_msg(d)) + ' Pesan' + rofl_list[top_count-1]  + '\n'
        await message.answer(f'Peringkat Teratas Untuk saat ini\nDalam menggunakan botüòé :\n\n{final_top}')
    except Exception as e:
        warning_log.warning(e)

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Chating(StatesGroup):
	msg = State()

@dp.message_handler(lambda message: message.text == 'Laki-Laki' or message.text == 'Perempuan',state='*')
async def chooce_sex(message : types.Message, state: FSMContext):
    ''' –í—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ '''
    try:
        if db.queue_exists(message.from_user.id):
            db.delete_from_queue(message.from_user.id)
        if message.text == 'Laki-Laki':
            db.edit_sex(True,message.from_user.id)
            db.add_to_queue(message.from_user.id,True)
        elif message.text == 'Perempuan':
            db.edit_sex(False,message.from_user.id)
            db.add_to_queue(message.from_user.id,False)
        else:
            db.add_to_queue(message.from_user.id,db.get_sex_user(message.from_user.id)[0])
        await message.answer('Tunggu Sebentar..Kami Sedang mencari Pasanganmu')

        #–∫–Ω–æ–ø–∫–∏
        stop = KeyboardButton('‚ùåHentikan Obrolan')

        share_link = KeyboardButton('Kirim ID kamu kepasanganmuüòú')

        coin = KeyboardButton('–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—Éüé≤')

        menu_msg = ReplyKeyboardMarkup()

        menu_msg.add(stop,share_link,coin)

        while True:
            await asyncio.sleep(0.5)
            if db.search(db.get_sex_user(message.from_user.id)[0]) != None: #–µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —é–∑–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
                try:
                    db.update_connect_with(db.search(db.get_sex_user(message.from_user.id)[0])[0],message.from_user.id) #–æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è —é–∑–µ—Ä
                    db.update_connect_with(message.from_user.id,db.search(db.get_sex_user(message.from_user.id)[0])[0])
                    break
                except Exception as e:
                    print(e)

        while True:
            await asyncio.sleep(0.5)
            if db.select_connect_with(message.from_user.id)[0] != None: #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω–µ–∫—Ç–∏–ª—Å—è


                break


        try:
            db.delete_from_queue(message.from_user.id)  #—É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            db.delete_from_queue(db.select_connect_with(message.from_user.id)[0])
        except:
            pass

        await Chating.msg.set()


        await bot.send_message(db.select_connect_with(message.from_user.id)[0],'Pasangan Ditemukan.., Silahkan mulai Obrolanüí¨',reply_markup=menu_msg)
        await message.answer('Pasangan Ditemukan..., Silahkan mulai Obrolanüí¨',reply_markup=menu_msg)
        return
    except Exception as e:
        warning_log.warning(e)
        await send_to_channel_log_exception(message,e)


@dp.message_handler(content_types=ContentTypes.TEXT)
@dp.message_handler(state=Chating.msg)
async def chating(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω –¢–ï–ö–°–¢–û–í–´–ú–ò —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ '''
    try:

        next = KeyboardButton('‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥')

        back = KeyboardButton('–ù–∞–∑–∞–¥')

        menu_msg_chating = ReplyKeyboardMarkup()

        menu_msg_chating.add(next,back)

        await state.update_data(msg=message.text)

        user_data = await state.get_data()

        if user_data['msg'] == 'ID kamu Terkirimüòú':
            if message.from_user.username == none:
                await bot.send_message(db.select_connect_with_self(message.from_user.id)[0],'Kamu belum mengatur Username, Silahkan atur username kamu...\nDi pengaturan Telegran!')
            else:
                await bot.send_message(db.select_connect_with_self(message.from_user.id)[0],'@' + message.from_user.username)
                await message.answer('@' + message.from_user.username)

        elif user_data['msg'] == '‚ùåHentikan Obrolan':
            await message.answer('Obrolan dihentikan!',reply_markup=menu_msg_chating)
            await bot.send_message(db.select_connect_with(message.from_user.id)[0],'Obrolan dihentikan!',reply_markup=menu_msg_chating)
            db.update_connect_with(None,db.select_connect_with(message.from_user.id)[0])
            db.update_connect_with(None,message.from_user.id)

        elif user_data['msg'] == '‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥':
            await chooce_sex(message,state)

        elif user_data['msg'] == '–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—Éüé≤':
            coin = random.randint(1,2)

            if coin == 1:
                coin = text(italic('–†–µ—à–∫–∞'))
            else:
                coin = text(italic('–û—Ä—ë–ª'))

            await message.answer(coin,parse_mode=ParseMode.MARKDOWN)
            await bot.send_message(db.select_connect_with(message.from_user.id)[0],coin,parse_mode=ParseMode.MARKDOWN)

        elif user_data['msg'] == '–ù–∞–∑–∞–¥':
            await start(message,state)
            await state.finish()

        else:
            await bot.send_message(db.select_connect_with(message.from_user.id)[0],user_data['msg']) #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.log_msg(message.from_user.id,user_data['msg']) #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–æ–≤ –≤ –±–¥
            db.add_count_msg(message.from_user.id) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            await send_to_channel_log(message)

    except aiogram.utils.exceptions.ChatIdIsEmpty:
        await state.finish()
        await start(message,state)
    except aiogram.utils.exceptions.BotBlocked:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç –±–æ—Ç–∞!')
        await state.finish()
        await start(message,state)
    except Exception as e:
        warning_log.warning(e)
        await send_to_channel_log_exception(message,e)

@dp.message_handler(content_types=ContentTypes.PHOTO,state=Chating.msg)
async def chating_photo(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò '''
    try:
        await message.photo[-1].download('photo_user/' + str(message.from_user.id) + '.jpg')
        with open('photo_user/' + str(message.from_user.id) + '.jpg','rb') as photo:
            await bot.send_photo(db.select_connect_with(message.from_user.id)[0],photo,caption=message.text)
    except Exception as e:
        warning_log.warning(e)
        await send_to_channel_log_exception(message,e)

@dp.message_handler(content_types=ContentTypes.STICKER,state=Chating.msg)
async def chating_sticker(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω C–¢–ò–ö–ï–†–ê–ú–ò '''
    try:
        await bot.send_sticker(db.select_connect_with(message.from_user.id)[0],message.sticker.file_id)
    except Exception as e:
        warning_log.warning(e)
        await send_to_channel_log_exception(message,e)




#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥
@dp.message_handler(commands=['back'])
@dp.message_handler(lambda message : message.text == '–ù–∞–∑–∞–¥',state='*')
async def back(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã back '''
    await state.finish()
    await start(message,state)

#–ª–æ–≥–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
async def send_to_channel_log(message : types.Message):
    await bot.send_message(-1001422742707,f'ID - {str(message.from_user.id)}\nusername - {str(message.from_user.username)}\nmessage - {str(message.text)}')

async def send_to_channel_log_exception(message : types.Message,except_name):
    await bot.send_message(-1001422742707,f'–û—à–∏–±–∫–∞\n\n{except_name}')


#–∞–¥–º–∏–Ω–∫–∞
@dp.message_handler(lambda message: message.text.startswith('/sendmsg_admin'),state='*')
async def admin_send_msg(message : types.Message):
    if message.from_user.id in config.ADMIN_LIST:
        msg = message.text.split(',')
        await bot.send_message(int(msg[1]),'C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n'  + msg[2])
    else:
        await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞
@dp.message_handler()
async def end(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start –∏ /help')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True,)
